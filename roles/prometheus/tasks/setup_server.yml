---
- name: Ensure pip is installed
  apt:
    pkg={{ item }}
    state=present
    update_cache=yes
  with_items:
    - python-pip
  become: true

- name: Install docker-py
  pip: name=docker-py
  become: true

- file: path=/srv/prometheus state=directory mode=0755
- file: path=/srv/prometheus/nodes.json state=touch mode=0755
- file: path=/srv/prometheus/snmp_exporter.json state=touch mode=0755
- file: path=/srv/prometheus-data state=directory mode=0755
- file: path=/srv/grafana-db state=directory mode=0755
- file: path=/srv/grafana state=directory mode=0755
- file: path=/srv/alertmanager state=directory mode=0755
- file: path=/etc/snmp_exporter state=directory mode=0755

- name: remove any old prometheus
  become: true
  docker:
    name: prometheus
    image: prom/prometheus
    state: absent

- name: remove any old blackbox_exporter
  become: true
  docker:
    name: blackbox-exporter
    image: prom/blackbox-exporter
    state: absent

- name: remove any old grafana
  become: true
  docker:
    name: grafana
    image: grafana/grafana
    state: absent

- name: remove any old alertmanager
  become: true
  docker:
    name: alertmanager
    image: prom/alertmanager
    state: absent

- template: src=prometheus.yml dest=/srv/prometheus.yml mode=0755 force=yes
- template: src=alertmanager.yml dest=/srv/alertmanager.yml mode=0755 force=yes
- template: src=alert.rules.j2 dest=/srv/prometheus-alert.rules mode=0755 force=yes

- name: install alertmanager
  become: true
  docker:
    name: alertmanager
    hostname: "{{monitor_host}}"
    image: prom/alertmanager
    state: reloaded
    restart_policy: always
    pull: always
    ports:
    - "9093:9093"
    volumes:
    - /srv/alertmanager:/alertmanager
    - /srv/alertmanager.yml:/etc/alertmanager/config.yml

- name: install prometheus
  become: true
  docker:
    name: prometheus
    hostname: "{{monitor_host}}"
    image: prom/prometheus
    command: "-config.file=/etc/prometheus/prometheus.yml -storage.local.path=/prometheus -web.console.libraries=/usr/share/prometheus/console_libraries -web.console.templates=/usr/share/prometheus/consoles -alertmanager.url http://{{ inventory_hostname }}:9093"
    state: reloaded
    restart_policy: always
    pull: always
    ports:
    - "9090:9090"
    volumes:
    - /srv/prometheus-data:/prometheus-data
    - /srv/prometheus:/prometheus
    - /srv/prometheus.yml:/etc/prometheus/prometheus.yml
    - /srv/prometheus-alert.rules:/etc/prometheus/alert.rules

- template: src=blackbox_exporter.yml.j2 dest=/srv/blackbox_exporter.yml mode=0755 force=yes
- name: install blackbox-exporter
  become: true
  docker:
    name: blackbox-exporter
    hostname: "{{monitor_host}}"
    image: prom/blackbox-exporter
    state: reloaded
    restart_policy: always
    pull: always
    ports:
    - "9115:9115"
    volumes:
    - /srv/blackbox_exporter.yml:/etc/blackbox_exporter/config.yml

- name: install grafana
  become: true
  docker:
    name: grafana
    hostname: "{{monitor_host}}"
    image: grafana/grafana
    state: reloaded
    restart_policy: always
    pull: always
    ports:
    - "3000:3000"
    volumes:
    - /srv/grafana-db:/var/lib/grafana
    env:
      GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"

- wait_for: port=3000 delay=10

- uri:
    url: "http://{{ inventory_hostname }}:3000/api/datasources"
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    body: '{"orgId":1,"name":"Prometheus","type":"prometheus","typeLogoUrl":"public/app/plugins/datasource/prometheus/img/prometheus_logo.svg","access":"direct","url":"http://{{ inventory_hostname }}:9090","password":"","user":"","database":"","basicAuth":false,"basicAuthUser":"","basicAuthPassword":"","withCredentials":false,"isDefault":true}'
    force_basic_auth: yes
    status_code: 200,500
    body_format: json

- uri:
    url: "http://{{ inventory_hostname }}:3000/api/dashboards/db"
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    body: "{{ lookup('file','roles/prometheus/templates/mikrotik_routeros_device.json.j2') }}"
    force_basic_auth: yes
    status_code: 200,412
    body_format: json

- uri:
    url: "http://{{ inventory_hostname }}:3000/api/dashboards/db"
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    body: "{{ lookup('file','roles/prometheus/templates/mikrotik_wireless_ap.json.j2') }}"
    force_basic_auth: yes
    status_code: 200,412
    body_format: json

- uri:
    url: "http://{{ inventory_hostname }}:3000/api/dashboards/db"
    method: POST
    user: admin
    password: "{{ grafana_admin_password }}"
    body: "{{ lookup('file','roles/prometheus/templates/mikrotik_wireless_client.json.j2') }}"
    force_basic_auth: yes
    status_code: 200,412
    body_format: json

- name: download foo.conf
  get_url:
    url: https://github.com/prometheus/snmp_exporter/releases/download/v0.1.0/snmp_exporter-0.1.0.linux-amd64.tar.gz
    dest: /tmp/snmp_exporter-0.1.0.linux-amd64.tar.gz
    mode: 0777
- unarchive: src=/tmp/snmp_exporter-0.1.0.linux-amd64.tar.gz dest=/tmp copy=no
- copy: src=/tmp/snmp_exporter-0.1.0.linux-amd64/snmp_exporter dest=/usr/bin/snmp_exporter owner=root group=root mode=0755 remote_src=true
- copy: src=/tmp/snmp_exporter-0.1.0.linux-amd64/snmp.yml dest=/etc/snmp_exporter/snmp.yml owner=root group=root mode=0755 remote_src=true
- template: src=snmp_exporter.j2 dest=/etc/systemd/system/snmp_exporter.service mode=0755 owner=root group=root force=yes
- template: src=snmp.yml.j2 dest=/etc/snmp_exporter/snmp.yml mode=0755 owner=root group=root force=yes #TODO: when my PR gets accepted, replace with a lineinfile to add the community to the config
- service: name=snmp_exporter state=restarted
- template: src=dynamic_inventory.py dest=/srv/prometheus/dynamic_inventory.py mode=0755 owner=root group=root force=yes
- cron: name="Grab SNMP exporter hosts" minute="*/2" job="/usr/bin/python /srv/prometheus/dynamic_inventory.py mikrotik /srv/prometheus/snmp_exporter.json && /usr/bin/python /srv/prometheus/dynamic_inventory.py server /srv/prometheus/node_exporter.json :9100 && /usr/bin/python /srv/prometheus/dynamic_inventory.py {{ portal_organizational_user }} /srv/prometheus/blackbox_exporter.json"
